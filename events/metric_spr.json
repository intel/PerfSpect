[
    {
        "name": "metric_CPU operating frequency (in GHz)",
        "expression": "([cpu-cycles] / [ref-cycles]) * ([const_tsc_freq] / 1000000000)"
    },
    {
        "name": "metric_CPU utilization %",
        "expression": "100 * [ref-cycles] / [const_TSC]"
    },
    {
        "name": "metric_CPU utilization% in kernel mode",
        "expression": "100 * [ref-cycles:k] / [const_TSC]"
    },
    {
        "name": "metric_CPI",
        "expression": "[cpu-cycles] / [instructions]"
    },
    {
        "name": "metric_kernel_CPI",
        "expression": "[cpu-cycles:k] / [instructions:k]"
    },
    {
        "name": "metric_IPC",
        "expression": "[instructions] / [cpu-cycles]"
    },
    {
        "name": "metric_giga_instructions_per_sec",
        "expression": "[instructions] / 1000000000"
    },
    {
        "name": "metric_L1D MPI (includes data+rfo w/ prefetches)",
        "tags": "transaction",
        "expression": "[L1D.REPLACEMENT] / [instructions]"
    },
    {
        "name": "metric_L1D demand data read hits per instr",
        "expression": "[MEM_LOAD_RETIRED.L1_HIT] / [instructions]"
    },
    {
        "name": "metric_L1-I code read misses (w/ prefetches) per instr",
        "expression": "[L2_RQSTS.ALL_CODE_RD] / [instructions]"
    },
    {
        "name": "metric_L2 demand data read hits per instr",
        "expression": "[MEM_LOAD_RETIRED.L2_HIT] / [instructions]"
    },
    {
        "name": "metric_L2 MPI (includes code+data+rfo w/ prefetches)",
        "expression": "[L2_LINES_IN.ALL] / [instructions]"
    },
    {
        "name": "metric_L2 demand data read MPI",
        "expression": "[MEM_LOAD_RETIRED.L2_MISS] / [instructions]"
    },
    {
        "name": "metric_L2 demand code MPI",
        "expression": "[L2_RQSTS.CODE_RD_MISS] / [instructions]"
    },
    {
        "name": "metric_UPI Data transmit BW (MB/sec) (only data)",
        "expression": "[UNC_UPI_TxL_FLITS.ALL_DATA] * (64 / 9) / 1000000"
    },
    {
        "name": "metric_package power (watts)",
        "expression": "[power/energy-pkg/]"
    },
    {
        "name": "metric_DRAM power (watts)",
        "expression": "[power/energy-ram/]"
    },
    {
        "name": "metric_core c6 residency %",
        "expression": "100 * [cstate_core/c6-residency/] / [const_TSC]"
    },
    {
        "name": "metric_package c6 residency %",
        "expression": "100 * [cstate_pkg/c6-residency/] * [const_core_count] / [const_TSC]"
    },
    {
        "name": "metric_core initiated local dram read bandwidth (MB/sec)",
        "expression": "([OCR.READS_TO_CORE.LOCAL_DRAM] + [OCR.HWPF_L3.L3_MISS_LOCAL]) * 64 / 1000000"
    },
    {
        "name": "metric_core initiated remote dram read bandwidth (MB/sec)",
        "expression": "([OCR.READS_TO_CORE.REMOTE_DRAM] + [OCR.HWPF_L3.REMOTE]) * 64 / 1000000"
    },
    {
        "name": "metric_memory bandwidth read (MB/sec)",
        "expression": "[UNC_M_CAS_COUNT.RD] * 64 / 1000000"
    },
    {
        "name": "metric_memory bandwidth write (MB/sec)",
        "expression": "[UNC_M_CAS_COUNT.WR] * 64 / 1000000"
    },
    {
        "name": "metric_memory bandwidth total (MB/sec)",
        "expression": "([UNC_M_CAS_COUNT.RD] + [UNC_M_CAS_COUNT.WR]) * 64 / 1000000"
    },
    {
        "name": "metric_DCPMEM_memory_mode near memory cache read miss rate%",
        "expression": "100 * ([UNC_M_TAGCHK.MISS_CLEAN] + [UNC_M_TAGCHK.MISS_DIRTY]) / ([UNC_M_TAGCHK.HIT] + [UNC_M_TAGCHK.MISS_CLEAN] + [UNC_M_TAGCHK.MISS_DIRTY])"
    },
    {
        "name": "metric_LLC code read MPI (demand+prefetch)",
        "expression": "[UNC_CHA_TOR_INSERTS.IA_MISS_CRD] / [instructions]"
    },
    {
        "name": "metric_LLC data read MPI (demand+prefetch)",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFDATA] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF]) / [instructions]"
    },
    {
        "name": "metric_LLC total HITM (per instr) (excludes LLC prefetches)",
        "expression": "[OCR.READS_TO_CORE.REMOTE_CACHE.SNOOP_HITM] / [instructions]"
    },
    {
        "name": "metric_LLC total HIT clean line forwards (per instr) (excludes LLC prefetches)",
        "expression": "[OCR.READS_TO_CORE.REMOTE_CACHE.SNOOP_HIT_WITH_FWD] / [instructions]"
    },
    {
        "name": "metric_Average LLC demand data read miss latency (in ns)",
        "expression": "1000000000 * ([UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD] / [UNC_CHA_TOR_INSERTS.IA_MISS_DRD]) / ([UNC_CHA_CLOCKTICKS] / ([const_cha_count] * [const_socket_count]))"
    },
    {
        "name": "metric_Average LLC demand data read miss latency for LOCAL requests (in ns)",
        "expression": "(1000000000 * [UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_LOCAL] / [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_LOCAL]) / ([UNC_CHA_CLOCKTICKS] / ([const_cha_count] * [const_socket_count]))"
    },
    {
        "name": "metric_Average LLC demand data read miss latency for REMOTE requests (in ns)",
        "expression": "(1000000000 * [UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE] / [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE]) / ([UNC_CHA_CLOCKTICKS] / ([const_cha_count] * [const_socket_count]))"
    },
    {
        "name": "metric_ITLB (2nd level) MPI",
        "expression": "[ITLB_MISSES.WALK_COMPLETED] / [instructions]"
    },
    {
        "name": "metric_DTLB (2nd level) load MPI",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED] / [instructions]"
    },
    {
        "name": "metric_DTLB (2nd level) 2MB large page load MPI",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M] / [instructions]"
    },
    {
        "name": "metric_DTLB (2nd level) store MPI",
        "expression": "[DTLB_STORE_MISSES.WALK_COMPLETED] / [instructions]"
    },
    {
        "name": "metric_NUMA %_Reads addressed to local DRAM",
        "expression": "100 * ([UNC_CHA_TOR_INSERTS.IA_MISS_DRD_LOCAL] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF_LOCAL]) / ([UNC_CHA_TOR_INSERTS.IA_MISS_DRD_LOCAL] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF_LOCAL] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF_REMOTE])"
    },
    {
        "name": "metric_NUMA %_Reads addressed to remote DRAM",
        "expression": "100 * ([UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF_REMOTE]) / ([UNC_CHA_TOR_INSERTS.IA_MISS_DRD_LOCAL] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF_LOCAL] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF_REMOTE])"
    },
    {
        "name": "metric_uncore frequency GHz",
        "expression": "[UNC_CHA_CLOCKTICKS] / ([const_cha_count] * [const_socket_count]) / 1000000000"
    },
    {
        "name": "metric_IO_bandwidth_disk_or_network_writes (MB/sec)",
        "expression": "[UNC_CHA_TOR_INSERTS.IO_PCIRDCUR] * 64 / 1000000"
    },
    {
        "name": "metric_IO_bandwidth_disk_or_network_reads (MB/sec)",
        "expression": "([UNC_CHA_TOR_INSERTS.IO_ITOM] + [UNC_CHA_TOR_INSERTS.IO_ITOMCACHENEAR]) * 64 / 1000000"
    },
    {
        "name": "metric_TMA_Frontend_Bound(%)",
        "expression": "100 * ([PERF_METRICS.FRONTEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / ([TOPDOWN.SLOTS]))"
    },
    {
        "name": "metric_TMA_..Fetch_Latency(%)",
        "expression": "100 * (([PERF_METRICS.FETCH_LATENCY] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / ([TOPDOWN.SLOTS])))"
    },
    {
        "name": "metric_TMA_....ICache_Misses(%)",
        "expression": "100 * ([ICACHE_DATA.STALLS] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_....ITLB_Misses(%)",
        "expression": "100 * ([ICACHE_TAG.STALLS] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_....Branch_Resteers(%)",
        "expression": "100 * ([INT_MISC.CLEAR_RESTEER_CYCLES] / [cpu-cycles] + ([INT_MISC.UNKNOWN_BRANCH_CYCLES] / [cpu-cycles]))"
    },
    {
        "name": "metric_TMA_......Mispredicts_Resteers(%)",
        "expression": "100 * ((([PERF_METRICS.BRANCH_MISPREDICTS] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))) / (max(0, (1 - (([PERF_METRICS.FRONTEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / [TOPDOWN.SLOTS]) + ([PERF_METRICS.BACKEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))) + ([PERF_METRICS.RETIRING] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])))))))) * [INT_MISC.CLEAR_RESTEER_CYCLES] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_......Clears_Resteers(%)",
        "expression": "100 * ((1 - (([PERF_METRICS.BRANCH_MISPREDICTS] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))) / (max(0, (1 - (([PERF_METRICS.FRONTEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / [TOPDOWN.SLOTS]) + ([PERF_METRICS.BACKEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))) + ([PERF_METRICS.RETIRING] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))))))))) * [INT_MISC.CLEAR_RESTEER_CYCLES] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_......Unknown_Branches(%)",
        "expression": "100 * ([INT_MISC.UNKNOWN_BRANCH_CYCLES] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_..Fetch_Bandwidth(%)",
        "expression": "100 * (max(0, (([PERF_METRICS.FRONTEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / [TOPDOWN.SLOTS]) - (([PERF_METRICS.FETCH_LATENCY] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / [TOPDOWN.SLOTS])))))"
    },
    {
        "name": "metric_TMA_Bad_Speculation(%)",
        "expression": "100 * (max((1 - (([PERF_METRICS.FRONTEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])) - [INT_MISC.UOP_DROPPING] / [TOPDOWN.SLOTS]) + ([PERF_METRICS.BACKEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))) + ([PERF_METRICS.RETIRING] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))))), 0))"
    },
    {
        "name": "metric_TMA_..Branch_Mispredicts(%)",
        "expression": "100 * ([PERF_METRICS.BRANCH_MISPREDICTS] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND])))"
    },
    {
        "name": "metric_TMA_..Machine_Clears(%)",
        "expression": "100 * (max(0, ((max(0, (1 - (([PERF_METRICS.FRONTEND_BOUND] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING])) - [INT_MISC.UOP_DROPPING] / [TOPDOWN.SLOTS]) + ([PERF_METRICS.BACKEND_BOUND] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING]))) + ([PERF_METRICS.RETIRING] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING]))))))) - ([PERF_METRICS.BRANCH_MISPREDICTS] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING]))))))"
    },
    {
        "name": "metric_TMA_Backend_Bound(%)",
        "expression": "100 * ([PERF_METRICS.BACKEND_BOUND] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING])))"
    },
    {
        "name": "metric_TMA_..Memory_Bound(%)",
        "expression": "100 * ([PERF_METRICS.MEMORY_BOUND] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING])))"
    },
    {
        "name": "metric_TMA_....L1_Bound(%)",
        "expression": "100 * (max(0, (([EXE_ACTIVITY.BOUND_ON_LOADS] - [MEMORY_ACTIVITY.STALLS_L1D_MISS]) / [cpu-cycles])))"
    },
    {
        "name": "metric_TMA_......DTLB_Load(%)",
        "expression": "100 * (min((7) * [DTLB_LOAD_MISSES.STLB_HIT:c1] + [DTLB_LOAD_MISSES.WALK_ACTIVE], max([CYCLE_ACTIVITY.CYCLES_MEM_ANY] - [CYCLE_ACTIVITY.CYCLES_L1D_MISS], 0)) / ( [cpu-cycles]))"
    },
    {
        "name": "metric_TMA_......Split_Loads(%)",
        "expression": "100 * (min(1, ((([L1D_PEND_MISS.PENDING] / ([MEM_LOAD_COMPLETED.L1_MISS_ANY])) * [LD_BLOCKS.NO_SR] / [cpu-cycles]))))"
    },
    {
        "name": "metric_TMA_....L2_Bound(%)",
        "expression": "100 * (([MEMORY_ACTIVITY.STALLS_L1D_MISS] - [MEMORY_ACTIVITY.STALLS_L2_MISS]) / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_....L3_Bound(%)",
        "expression": "100 * (([MEMORY_ACTIVITY.STALLS_L2_MISS] - [MEMORY_ACTIVITY.STALLS_L3_MISS]) / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_......MEM_Bandwidth(%)",
        "expression": "100 * ((min(([cpu-cycles] - 0), ([OFFCORE_REQUESTS_OUTSTANDING.DATA_RD:c4] - 0))) / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_......MEM_Latency(%)",
        "expression": "100 * ( ( min( [cpu-cycles], [OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD] ) ) / ( [cpu-cycles] ) - ( ( min([cpu-cycles], [OFFCORE_REQUESTS_OUTSTANDING.DATA_RD:c4] ) ) / ( [cpu-cycles] ) ) )"
    },
    {
        "name": "metric_TMA_....Store_Bound(%)",
        "expression": "100 * ([EXE_ACTIVITY.BOUND_ON_STORES] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_..Core_Bound(%)",
        "expression": "100 * (max(0, (([PERF_METRICS.BACKEND_BOUND] / (([PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND]))) - ([PERF_METRICS.MEMORY_BOUND] / (([PERF_METRICS.BACKEND_BOUND] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING]))))))"
    },
    {
        "name": "metric_TMA_....Divider(%)",
        "expression": "100 * ([ARITH.DIV_ACTIVE] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_....Ports_Utilization(%)",
        "expression": "100 * ( ( [EXE_ACTIVITY.3_PORTS_UTIL:u0x80] + ( [RESOURCE_STALLS.SCOREBOARD] / ( [cpu-cycles] ) ) * ( [CYCLE_ACTIVITY.STALLS_TOTAL] - [EXE_ACTIVITY.BOUND_ON_LOADS] ) + ( [EXE_ACTIVITY.1_PORTS_UTIL] + ( [PERF_METRICS.RETIRING] / ( [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND] ) ) * [EXE_ACTIVITY.2_PORTS_UTIL:u0xc] ) ) / ( [cpu-cycles] ) if ( [ARITH.DIV_ACTIVE] < ( [CYCLE_ACTIVITY.STALLS_TOTAL] - [EXE_ACTIVITY.BOUND_ON_LOADS] ) ) else ( [EXE_ACTIVITY.1_PORTS_UTIL] + ( [PERF_METRICS.RETIRING] / ( [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.RETIRING] + [PERF_METRICS.BACKEND_BOUND] ) ) * [EXE_ACTIVITY.2_PORTS_UTIL:u0xc] ) / ( [cpu-cycles] ) )"
    },
    {
        "name": "metric_TMA_......Ports_Utilized_0(%)",
        "expression": "100 * ( [EXE_ACTIVITY.3_PORTS_UTIL:u0x80] / ( [cpu-cycles] ) + ( [RESOURCE_STALLS.SCOREBOARD] / ( [cpu-cycles] ) ) * ( [CYCLE_ACTIVITY.STALLS_TOTAL] - [EXE_ACTIVITY.BOUND_ON_LOADS] ) / ( [cpu-cycles] ) )"
    },
    {
        "name": "metric_TMA_......Ports_Utilized_1(%)",
        "expression": "100 * ([EXE_ACTIVITY.1_PORTS_UTIL] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_......Ports_Utilized_2(%)",
        "expression": "100 * ([EXE_ACTIVITY.2_PORTS_UTIL] / [cpu-cycles])"
    },
    {
        "name": "metric_TMA_......Ports_Utilized_3m(%)",
        "expression": "100 * [UOPS_EXECUTED.CYCLES_GE_3] / [cpu-cycles]"
    },
    {
        "name": "metric_TMA_Retiring(%)",
        "expression": "100 * ([PERF_METRICS.RETIRING] / ([PERF_METRICS.RETIRING] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.BACKEND_BOUND]))"
    },
    {
        "name": "metric_TMA_..Light_Operations(%)",
        "expression": "100 * (max(0, (([PERF_METRICS.RETIRING] / (([PERF_METRICS.RETIRING] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.BACKEND_BOUND]))) - ([PERF_METRICS.HEAVY_OPERATIONS] / (([PERF_METRICS.RETIRING] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.BACKEND_BOUND]))))))"
    },
    {
        "name": "metric_TMA_..Heavy_Operations(%)",
        "expression": "100 * ([PERF_METRICS.HEAVY_OPERATIONS] / (([PERF_METRICS.RETIRING] + [PERF_METRICS.FRONTEND_BOUND] + [PERF_METRICS.BAD_SPECULATION] + [PERF_METRICS.BACKEND_BOUND])))"
    },
    {
        "name": "metric_TMA_....Microcode_Sequencer(%)",
        "expression": "100 * ([UOPS_RETIRED.MS] / [TOPDOWN.SLOTS])"
    },
    {
        "name": "metric_TMA_Info_Thread_IPC",
        "expression": "[instructions] / [cpu-cycles]"
    },
    {
        "name": "metric_TMA_Info_Core_ILP",
        "expression": "[instructions] / [CPU_CLK_UNHALTED.DISTRIBUTED]"
    },
    {
        "name": "metric_TMA_Info_System_SMT_2T_Utilization",
        "expression": "(1 - [CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE] / [CPU_CLK_UNHALTED.REF_DISTRIBUTED]) if [const_socket_count] > 1 else 0"
    }
]