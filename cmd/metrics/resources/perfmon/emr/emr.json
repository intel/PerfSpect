{
  "Header": {
    "Copyright": "Copyright (c) 2001 - 2025 Intel Corporation. All rights reserved.",
    "Info": "PerfSpect Performance Monitoring Metrics for Intel(R) Xeon(R) 5 Processor (Emerald Rapids)"
  },
  "PerfmonMetricsFile": "emeraldrapids_metrics.json",
  "PerfmonCoreEventsFile": "emeraldrapids_core.json",
  "PerfmonUncoreEventsFile": "emeraldrapids_uncore.json",
  "PerfmonRetireLatencyFile": "",
  "ReportMetrics": [
  {
    "MetricName": "cpu_operating_frequency",
    "LegacyName": "metric_CPU operating frequency (in GHz)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "cpu_utilization",
    "LegacyName": "metric_CPU utilization %",
    "Origin": "perfmon"
  },
  {
    "MetricName": "cpu_util_kernel",
    "LegacyName": "metric_CPU utilization % in kernel mode",
    "Origin": "perfspect"
  },
  {
    "MetricName": "cpi",
    "LegacyName": "metric_CPI",
    "Origin": "perfmon"
  },
  {
    "MetricName": "cycles_per_txn",
    "LegacyName": "metric_cycles per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "kernel_cpi",
    "LegacyName": "metric_kernel_CPI",
    "Origin": "perfspect"
  },
  {
    "MetricName": "kernel_cycles_per_txn",
    "LegacyName": "metric_kernel_cycles per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "ipc",
    "LegacyName": "metric_IPC",
    "Origin": "perfspect"
  },
  {
    "MetricName": "giga_instructions_per_sec",
    "LegacyName": "metric_giga_instructions_per_sec",
    "Origin": "perfspect"
  },
  {
    "MetricName": "branch_misprediction_ratio",
    "LegacyName": "metric_branch misprediction ratio",
    "Origin": "perfspect"
  },
  {
    "MetricName": "locks_retired_per_instr",
    "LegacyName": "metric_locks retired per instr",
    "Origin": "perfspect"
  },
  {
    "MetricName": "locks_retired_per_txn",
    "LegacyName": "metric_locks retired per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l1d_mpi",
    "LegacyName": "metric_L1D MPI (includes data+rfo w/ prefetches)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l1d_misses_per_txn",
    "LegacyName": "metric_L1D misses per txn (includes data+rfo w/ prefetches)",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l1d_demand_data_read_hits_per_instr",
    "LegacyName": "metric_L1D demand data read hits per instr",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l1d_demand_data_read_hits_per_txn",
    "LegacyName": "metric_L1D demand data read hits per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l1_i_code_read_misses_with_prefetches_per_instr",
    "LegacyName": "metric_L1-I code read misses (w/ prefetches) per instr",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l1i_code_read_misses_per_txn",
    "LegacyName": "metric_L1I code read misses (includes prefetches) per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l2_demand_data_read_hits_per_instr",
    "LegacyName": "metric_L2 demand data read hits per instr",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l2_demand_data_read_hits_per_txn",
    "LegacyName": "metric_L2 demand data read hits per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l2_mpi",
    "LegacyName": "metric_L2 MPI (includes code+data+rfo w/ prefetches)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l2_misses_per_txn",
    "LegacyName": "metric_L2 misses per txn (includes code+data+rfo w/ prefetches)",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l2_demand_data_read_mpi",
    "LegacyName": "metric_L2 demand data read MPI",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l2_demand_data_read_misses_per_txn",
    "LegacyName": "metric_L2 demand data read misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "l2_demand_code_mpi",
    "LegacyName": "metric_L2 demand code MPI",
    "Origin": "perfmon"
  },
  {
    "MetricName": "l2_demand_code_misses_per_txn",
    "LegacyName": "metric_L2 demand code misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "llc_code_read_mpi_demand_plus_prefetch",
    "LegacyName": "metric_LLC code read MPI (demand+prefetch)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "llc_code_read_misses_per_txn",
    "LegacyName": "metric_LLC code read (demand+prefetch) misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "llc_data_read_mpi_demand_plus_prefetch",
    "LegacyName": "metric_LLC data read MPI (demand+prefetch)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "llc_data_read_misses_per_txn",
    "LegacyName": "metric_LLC data read (demand+prefetch) misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "llc_demand_data_read_miss_latency",
    "LegacyName": "metric_Average LLC demand data read miss latency (in ns)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "llc_demand_data_read_miss_latency_for_local_requests",
    "LegacyName": "metric_Average LLC demand data read miss latency for LOCAL requests (in ns)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "llc_demand_data_read_miss_latency_for_remote_requests",
    "LegacyName": "metric_Average LLC demand data read miss latency for REMOTE requests (in ns)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "upi_data_transmit_bw",
    "LegacyName": "metric_UPI Data transmit BW (MB/sec) (only data)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "package_power",
    "LegacyName": "metric_package power (watts)",
    "Origin": "perfspect"
  },
  {
    "MetricName": "dram_power",
    "LegacyName": "metric_DRAM power (watts)",
    "Origin": "perfspect"
  },
  {
    "MetricName": "core_c6_residency",
    "LegacyName": "metric_core c6 residency %",
    "Origin": "perfspect"
  },
  {
    "MetricName": "package_c6_residency",
    "LegacyName": "metric_package c6 residency %",
    "Origin": "perfspect"
  },
  {
    "MetricName": "percent_uops_delivered_from_decoded_icache",
    "LegacyName": "metric_% Uops delivered from decoded Icache (DSB)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "percent_uops_delivered_from_legacy_decode_pipeline",
    "LegacyName": "metric_% Uops delivered from legacy decode pipeline (MITE)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "memory_bandwidth_read",
    "LegacyName": "metric_memory bandwidth read (MB/sec)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "memory_bandwidth_write",
    "LegacyName": "metric_memory bandwidth write (MB/sec)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "memory_bandwidth_total",
    "LegacyName": "metric_memory bandwidth total (MB/sec)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "itlb_2nd_level_mpi",
    "LegacyName": "metric_ITLB (2nd level) MPI",
    "Origin": "perfmon"
  },
  {
    "MetricName": "itlb_misses_per_txn",
    "LegacyName": "metric_ITLB (2nd level) misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "dtlb_2nd_level_load_mpi",
    "LegacyName": "metric_DTLB (2nd level) load MPI",
    "Origin": "perfmon"
  },
  {
    "MetricName": "dtlb_load_misses_per_txn",
    "LegacyName": "metric_DTLB (2nd level) load misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "dtlb_2nd_level_store_mpi",
    "LegacyName": "metric_DTLB (2nd level) store MPI",
    "Origin": "perfmon"
  },
  {
    "MetricName": "dtlb_store_misses_per_txn",
    "LegacyName": "metric_DTLB (2nd level) store misses per txn",
    "Origin": "perfspect"
  },
  {
    "MetricName": "numa_reads_addressed_to_local_dram",
    "LegacyName": "metric_NUMA %_Reads addressed to local DRAM",
    "Origin": "perfmon"
  },
  {
    "MetricName": "numa_reads_addressed_to_remote_dram",
    "LegacyName": "metric_NUMA %_Reads addressed to remote DRAM",
    "Origin": "perfmon"
  },
  {
    "MetricName": "uncore_frequency",
    "LegacyName": "metric_uncore frequency GHz",
    "Origin": "perfmon"
  },
  {
    "MetricName": "io_bandwidth_write",
    "LegacyName": "metric_IO_bandwidth_disk_or_network_writes (MB/sec)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "io_bandwidth_read",
    "LegacyName": "metric_IO_bandwidth_disk_or_network_reads (MB/sec)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Frontend_Bound",
    "LegacyName": "metric_TMA_Frontend_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Fetch_Latency",
    "LegacyName": "metric_TMA_..Fetch_Latency(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "ICache_Misses",
    "LegacyName": "metric_TMA_....ICache_Misses(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "ITLB_Misses",
    "LegacyName": "metric_TMA_....ITLB_Misses(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Branch_Resteers",
    "LegacyName": "metric_TMA_....Branch_Resteers(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "MS_Switches",
    "LegacyName": "metric_TMA_....MS_Switches(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "LCP",
    "LegacyName": "metric_TMA_....LCP(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "DSB_Switches",
    "LegacyName": "metric_TMA_....DSB_Switches(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Fetch_Bandwidth",
    "LegacyName": "metric_TMA_..Fetch_Bandwidth(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "MITE",
    "LegacyName": "metric_TMA_....MITE(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "DSB",
    "LegacyName": "metric_TMA_....DSB(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "MS",
    "LegacyName": "metric_TMA_....MS(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Bad_Speculation",
    "LegacyName": "metric_TMA_Bad_Speculation(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Branch_Mispredicts",
    "LegacyName": "metric_TMA_..Branch_Mispredicts(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Other_Mispredicts",
    "LegacyName": "metric_TMA_....Other_Mispredicts(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Machine_Clears",
    "LegacyName": "metric_TMA_..Machine_Clears(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Other_Nukes",
    "LegacyName": "metric_TMA_....Other_Nukes(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Backend_Bound",
    "LegacyName": "metric_TMA_Backend_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Memory_Bound",
    "LegacyName": "metric_TMA_..Memory_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "L1_Bound",
    "LegacyName": "metric_TMA_....L1_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "DTLB_Load",
    "LegacyName": "metric_TMA_......DTLB_Load(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Store_Fwd_Blk",
    "LegacyName": "metric_TMA_......Store_Fwd_Blk(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "L1_Latency_Dependency",
    "LegacyName": "metric_TMA_......L1_Latency_Dependency(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Lock_Latency",
    "LegacyName": "metric_TMA_......Lock_Latency(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Split_Loads",
    "LegacyName": "metric_TMA_......Split_Loads(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "FB_Full",
    "LegacyName": "metric_TMA_......FB_Full(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "L2_Bound",
    "LegacyName": "metric_TMA_....L2_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "L3_Bound",
    "LegacyName": "metric_TMA_....L3_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Contested_Accesses",
    "LegacyName": "metric_TMA_......Contested_Accesses(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Data_Sharing",
    "LegacyName": "metric_TMA_......Data_Sharing(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "L3_Hit_Latency",
    "LegacyName": "metric_TMA_......L3_Hit_Latency(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "SQ_Full",
    "LegacyName": "metric_TMA_......SQ_Full(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "DRAM_Bound",
    "LegacyName": "metric_TMA_....DRAM_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "MEM_Bandwidth",
    "LegacyName": "metric_TMA_......MEM_Bandwidth(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "MEM_Latency",
    "LegacyName": "metric_TMA_......MEM_Latency(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Store_Bound",
    "LegacyName": "metric_TMA_....Store_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Store_Latency",
    "LegacyName": "metric_TMA_......Store_Latency(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "False_Sharing",
    "LegacyName": "metric_TMA_......False_Sharing(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Split_Stores",
    "LegacyName": "metric_TMA_......Split_Stores(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Streaming_Stores",
    "LegacyName": "metric_TMA_......Streaming_Stores(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "DTLB_Store",
    "LegacyName": "metric_TMA_......DTLB_Store(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Core_Bound",
    "LegacyName": "metric_TMA_..Core_Bound(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Divider",
    "LegacyName": "metric_TMA_....Divider(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Serializing_Operation",
    "LegacyName": "metric_TMA_....Serializing_Operation(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "AMX_Busy",
    "LegacyName": "metric_TMA_....AMX_Busy(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Ports_Utilization",
    "LegacyName": "metric_TMA_....Ports_Utilization(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Retiring",
    "LegacyName": "metric_TMA_Retiring(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Light_Operations",
    "LegacyName": "metric_TMA_..Light_Operations(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "FP_Arith",
    "LegacyName": "metric_TMA_....FP_Arith(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Int_Operations",
    "LegacyName": "metric_TMA_....Int_Operations(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Memory_Operations",
    "LegacyName": "metric_TMA_....Memory_Operations(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Fused_Instructions",
    "LegacyName": "metric_TMA_....Fused_Instructions(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Non_Fused_Branches",
    "LegacyName": "metric_TMA_....Non_Fused_Branches(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Other_Light_Ops",
    "LegacyName": "metric_TMA_....Other_Light_Ops(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Heavy_Operations",
    "LegacyName": "metric_TMA_..Heavy_Operations(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Few_Uops_Instructions",
    "LegacyName": "metric_TMA_....Few_Uops_Instructions(%)",
    "Origin": "perfmon"
  },
  {
    "MetricName": "Microcode_Sequencer",
    "LegacyName": "metric_TMA_....Microcode_Sequencer(%)",
    "Origin": "perfmon"
  }
],
  "Metrics": [
    {
      "MetricName": "cpu_util_kernel",
      "LegacyName": "metric_CPU utilization % in kernel mode",
      "BriefDescription": "CPU utilization percentage in kernel mode",
      "Events": [
        {
          "Name": "CPU_CLK_UNHALTED.THREAD_P:SUP",
          "Alias": "a"
        },
        {
          "Name": "TSC",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * (a / b)",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "cycles_per_txn",
      "LegacyName": "metric_cycles per txn",
      "BriefDescription": "Number of cycles per transaction",
      "Events": [
        {
          "Name": "CPU_CLK_UNHALTED.THREAD",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "kernel_cpi",
      "LegacyName": "metric_kernel_CPI",
      "BriefDescription": "Kernel cycles per instruction",
      "Events": [
        {
          "Name": "CPU_CLK_UNHALTED.THREAD_P:SUP",
          "Alias": "a"
        },
        {
          "Name": "INST_RETIRED.ANY",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "kernel_cycles_per_txn",
      "LegacyName": "metric_kernel_cycles per txn",
      "BriefDescription": "Number of kernel cycles per transaction",
      "Events": [
        {
          "Name": "CPU_CLK_UNHALTED.THREAD_P:SUP",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "ipc",
      "LegacyName": "metric_IPC",
      "BriefDescription": "Instructions per cycle",
      "Events": [
        {
          "Name": "INST_RETIRED.ANY",
          "Alias": "a"
        },
        {
          "Name": "CPU_CLK_UNHALTED.THREAD",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "giga_instructions_per_sec",
      "LegacyName": "metric_giga_instructions_per_sec",
      "BriefDescription": "Billions of instructions per second",
      "Events": [
        {
          "Name": "INST_RETIRED.ANY",
          "Alias": "a"
        }
      ],
      "Constants": [
      ],
      "Formula": "a / 1000000000",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "branch_misprediction_ratio",
      "LegacyName": "metric_branch misprediction ratio",
      "BriefDescription": "Ratio of branch mispredictions to the total number of branches retired.",
      "Events": [
        {
          "Name": "BR_MISP_RETIRED.ALL_BRANCHES",
          "Alias": "a"
        },
        {
          "Name": "BR_INST_RETIRED.ALL_BRANCHES",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "locks_retired_per_instr",
      "LegacyName": "metric_locks retired per instr",
      "BriefDescription": "Locks retired per instruction",
      "Events": [
        {
          "Name": "MEM_INST_RETIRED.LOCK_LOADS",
          "Alias": "a"
        },
        {
          "Name": "INST_RETIRED.ANY",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "locks_retired_per_txn",
      "LegacyName": "metric_locks retired per txn",
      "BriefDescription": "Locks retired per transaction",
      "Events": [
        {
          "Name": "MEM_INST_RETIRED.LOCK_LOADS",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l1d_misses_per_txn",
      "LegacyName": "metric_L1D misses per txn (includes data+rfo w/ prefetches)",
      "BriefDescription": "L1D misses per transaction (includes data+rfo with prefetches)",
      "Events": [
        {
          "Name": "L1D.REPLACEMENT",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l1d_demand_data_read_hits_per_txn",
      "LegacyName": "metric_L1D demand data read hits per txn",
      "BriefDescription": "L1D demand data read hits per transaction",
      "Events": [
        {
          "Name": "MEM_LOAD_RETIRED.L1_HIT",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l1i_code_read_misses_per_txn",
      "LegacyName": "metric_L1I code read misses (includes prefetches) per txn",
      "BriefDescription": "L1I code read misses (includes prefetches) per transaction",
      "Events": [
        {
          "Name": "L2_RQSTS.ALL_CODE_RD",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l2_demand_data_read_hits_per_txn",
      "LegacyName": "metric_L2 demand data read hits per txn",
      "BriefDescription": "L2 demand data read hits per transaction",
      "Events": [
        {
          "Name": "MEM_LOAD_RETIRED.L2_HIT",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l2_misses_per_txn",
      "LegacyName": "metric_L2 misses per txn (includes code+data+rfo w/ prefetches)",
      "BriefDescription": "L2 misses per transaction (includes code+data+rfo with prefetches)",
      "Events": [
        {
          "Name": "L2_LINES_IN.ALL",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l2_demand_data_read_misses_per_txn",
      "LegacyName": "metric_L2 demand data read misses per txn",
      "BriefDescription": "L2 demand data read misses per transaction",
      "Events": [
        {
          "Name": "MEM_LOAD_RETIRED.L2_MISS",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "l2_demand_code_misses_per_txn",
      "LegacyName": "metric_L2 demand code misses per txn",
      "BriefDescription": "L2 demand code misses per transaction",
      "Events": [
        {
          "Name": "L2_RQSTS.CODE_RD_MISS",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "llc_code_read_misses_per_txn",
      "LegacyName": "metric_LLC code read (demand+prefetch) misses per txn",
      "BriefDescription": "LLC code read (demand+prefetch) misses per transaction",
      "Events": [
        {
          "Name": "UNC_CHA_TOR_INSERTS.IA_MISS_CRD",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "llc_data_read_misses_per_txn",
      "LegacyName": "metric_LLC data read (demand+prefetch) misses per txn",
      "BriefDescription": "LLC data read (demand+prefetch) misses per transaction",
      "Events": [
        {
          "Name": "UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFDATA",
          "Alias": "a"
        },
        {
          "Name": "UNC_CHA_TOR_INSERTS.IA_MISS_DRD",
          "Alias": "b"
        },
        {
          "Name": "UNC_CHA_TOR_INSERTS.IA_MISS_DRD_PREF",
          "Alias": "c"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "d"
        }
      ],
      "Formula": "(a + b + c) / d",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "package_power",
      "LegacyName": "metric_package power (watts)",
      "BriefDescription": "Package power consumption in watts",
      "Events": [
        {
          "Name": "power/energy-pkg/",
          "Alias": "a"
        }
      ],
      "Constants": [
      ],
      "Formula": "a",
      "ResolutionLevels": "SOCKET, SYSTEM"
    },
    {
      "MetricName": "dram_power",
      "LegacyName": "metric_DRAM power (watts)",
      "BriefDescription": "DRAM power consumption in watts",
      "Events": [
        {
          "Name": "power/energy-ram/",
          "Alias": "a"
        }
      ],
      "Constants": [
      ],
      "Formula": "a",
      "ResolutionLevels": "SOCKET, SYSTEM"
    },
    {
      "MetricName": "core_c6_residency",
      "LegacyName": "metric_core c6 residency %",
      "BriefDescription": "Core C6 state residency percentage",
      "Events": [
        {
          "Name": "cstate_core/c6-residency/",
          "Alias": "a"
        },
        {
          "Name": "TSC",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * a / b",
      "ResolutionLevels": "CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "package_c6_residency",
      "LegacyName": "metric_package c6 residency %",
      "BriefDescription": "Package C6 state residency percentage",
      "Events": [
        {
          "Name": "cstate_pkg/c6-residency/",
          "Alias": "a"
        },
        {
          "Name": "TSC",
          "Alias": "b"
        }
      ],
      "Constants": [
        {
          "Name": "CORES_PER_SOCKET",
          "Alias": "c"
        }
      ],
      "Formula": "100 * a * c / b",
      "ResolutionLevels": "SOCKET, SYSTEM"
    },
    {
      "MetricName": "itlb_misses_per_txn",
      "LegacyName": "metric_ITLB (2nd level) misses per txn",
      "BriefDescription": "ITLB (2nd level) misses per transaction",
      "Events": [
        {
          "Name": "ITLB_MISSES.WALK_COMPLETED",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "dtlb_load_misses_per_txn",
      "LegacyName": "metric_DTLB (2nd level) load misses per txn",
      "BriefDescription": "DTLB (2nd level) load misses per transaction",
      "Events": [
        {
          "Name": "DTLB_LOAD_MISSES.WALK_COMPLETED",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    },
    {
      "MetricName": "dtlb_store_misses_per_txn",
      "LegacyName": "metric_DTLB (2nd level) store misses per txn",
      "BriefDescription": "DTLB (2nd level) store misses per transaction",
      "Events": [
        {
          "Name": "DTLB_STORE_MISSES.WALK_COMPLETED",
          "Alias": "a"
        }
      ],
      "Constants": [
        {
          "Name": "TXN",
          "Alias": "b"
        }
      ],
      "Formula": "a / b",
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM"
    }
  ],
  "AlternateTMAMetrics": [
    {
      "MetricName": "Frontend_Bound",
      "LegacyName": "metric_TMA_Frontend_Bound(%)",
      "Level": 1,
      "BriefDescription": "This category represents fraction of slots where the processor's Frontend undersupplies its Backend. Frontend denotes the first part of the processor core responsible to fetch operations that are executed later on by the Backend part. Within the Frontend; a branch predictor predicts the next address to fetch; cache-lines are fetched from the memory subsystem; parsed into instructions; and lastly decoded into micro-operations (uops). Ideally the Frontend can issue Pipeline_Width uops every cycle to the Backend. Frontend Bound denotes unutilized issue-slots when there is no Backend stall; i.e. bubbles where Frontend delivered no uops while Backend could have accepted them. For example; stalls due to instruction-cache misses would be categorized under Frontend Bound.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "IDQ_BUBBLES.CORE",
          "Alias": "a"
        },
        {
          "Name": "INT_MISC.UOP_DROPPING",
          "Alias": "b"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "c"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( ( a - b ) / c )",
      "BaseFormula": "100 * ( ( [IDQ_BUBBLES.CORE] - [INT_MISC.UOP_DROPPING] ) / [TOPDOWN.SLOTS_P] )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_Frontend_Bound(%)"
          }
        ],
        "Formula": "a > 15",
        "BaseFormula": "metric_TMA_Frontend_Bound(%) > 15",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "BvFB;BvIO;TmaL1;PGO",
      "LocateWith": " FRONTEND_RETIRED.LATENCY_GE_4"
    },
    {
      "MetricName": "Fetch_Latency",
      "LegacyName": "metric_TMA_..Fetch_Latency(%)",
      "ParentCategory": "Frontend_Bound",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots the CPU was stalled due to Frontend latency issues.  For example; instruction-cache misses; iTLB misses or fetch stalls after a branch misprediction are categorized under Frontend Latency. In such cases; the Frontend eventually delivers no uops for some period.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "IDQ_BUBBLES.CYCLES_0_UOPS_DELIV.CORE",
          "Alias": "a"
        },
        {
          "Name": "INT_MISC.UOP_DROPPING",
          "Alias": "b"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "c"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( ( a * ( 6 ) - b ) / c )",
      "BaseFormula": " ( 100 * ( ( [IDQ_BUBBLES.CYCLES_0_UOPS_DELIV.CORE] * ( 6 ) - [INT_MISC.UOP_DROPPING] ) / [TOPDOWN.SLOTS_P] ) )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Fetch_Latency(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_Frontend_Bound(%)"
          }
        ],
        "Formula": "a > 10 & b > 15",
        "BaseFormula": "metric_TMA_..Fetch_Latency(%) > 10 & metric_TMA_Frontend_Bound(%) > 15",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Frontend;TmaL2",
      "LocateWith": " FRONTEND_RETIRED.LATENCY_GE_16;FRONTEND_RETIRED.LATENCY_GE_8"
    },
    {
      "MetricName": "Fetch_Bandwidth",
      "LegacyName": "metric_TMA_..Fetch_Bandwidth(%)",
      "ParentCategory": "Frontend_Bound",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots the CPU was stalled due to Frontend bandwidth issues.  For example; inefficiencies at the instruction decoders; or restrictions for caching in the DSB (decoded uops cache) are categorized under Fetch Bandwidth. In such cases; the Frontend typically delivers suboptimal amount of uops to the Backend.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "IDQ_UOPS_NOT_DELIVERED.CORE",
          "Alias": "a"
        },
        {
          "Name": "INT_MISC.UOP_DROPPING",
          "Alias": "b"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "c"
        },
        {
          "Name": "IDQ_BUBBLES.CYCLES_0_UOPS_DELIV.CORE",
          "Alias": "d"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( max( 0 , ( ( a - b ) / ( c ) ) - ( ( d * ( 6 ) - b ) / ( c ) ) ) )",
      "BaseFormula": "max( 0 , tma_frontend_bound - tma_fetch_latency )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Fetch_Bandwidth(%)"
          }
        ],
        "Formula": "a > 20",
        "BaseFormula": "metric_TMA_..Fetch_Bandwidth(%) > 20",
        "ThresholdIssues": "$issueFB"
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "FetchBW;Frontend;TmaL2",
      "LocateWith": "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1;FRONTEND_RETIRED.LATENCY_GE_1;FRONTEND_RETIRED.LATENCY_GE_2"
    },
    {
      "MetricName": "Bad_Speculation",
      "LegacyName": "metric_TMA_Bad_Speculation(%)",
      "Level": 1,
      "BriefDescription": "This category represents fraction of slots wasted due to incorrect speculations. This include slots used to issue uops that do not eventually get retired and slots for which the issue-pipeline was blocked due to recovery from earlier incorrect speculation. For example; wasted work due to miss-predicted branches are categorized under Bad Speculation category. Incorrect data speculation followed by Memory Ordering Nukes is another example.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "IDQ_BUBBLES.CORE",
          "Alias": "a"
        },
        {
          "Name": "INT_MISC.UOP_DROPPING",
          "Alias": "b"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "c"
        },
        {
          "Name": "TOPDOWN.BACKEND_BOUND_SLOTS",
          "Alias": "d"
        },
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "e"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( max( 1 - ( ( ( a - b ) / c ) + ( d / c ) + ( e / c ) ) , 0 ) )",
      "BaseFormula": " 100 * ( max( 1 - ( ( ( [IDQ_BUBBLES.CORE] - [INT_MISC.UOP_DROPPING] ) / [TOPDOWN.SLOTS_P] ) + ( [TOPDOWN.BACKEND_BOUND_SLOTS] / [TOPDOWN.SLOTS_P] ) + ( [UOPS_RETIRED.SLOTS] / [TOPDOWN.SLOTS_P] ) ) , 0 ) )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_Bad_Speculation(%)"
          }
        ],
        "Formula": "a > 15",
        "BaseFormula": "metric_TMA_Bad_Speculation(%) > 15",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "TmaL1",
      "LocateWith": "#NA"
    },
    {
      "MetricName": "Branch_Mispredicts",
      "LegacyName": "metric_TMA_..Branch_Mispredicts(%)",
      "ParentCategory": "Bad_Speculation",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots the CPU has wasted due to Branch Misprediction.  These slots are either wasted by uops fetched from an incorrectly speculated program path; or stalls when the out-of-order part of the machine needs to recover its state from a speculative path.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "TOPDOWN.BR_MISPREDICT_SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( a / ( b ) )",
      "BaseFormula": "perf_metrics.branch_mispredicts / ( perf_metrics.frontend_bound + perf_metrics.bad_speculation + perf_metrics.retiring + perf_metrics.backend_bound )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Branch_Mispredicts(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_Bad_Speculation(%)"
          }
        ],
        "Formula": "a > 10 & b > 15",
        "BaseFormula": "metric_TMA_..Branch_Mispredicts(%) > 10 & metric_TMA_Bad_Speculation(%) > 15",
        "ThresholdIssues": "$issueBM"
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "BadSpec;BrMispredicts;BvMP;TmaL2",
      "LocateWith": "TOPDOWN.BR_MISPREDICT_SLOTS"
    },
    {
      "MetricName": "Machine_Clears",
      "LegacyName": "metric_TMA_..Machine_Clears(%)",
      "ParentCategory": "Bad_Speculation",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots the CPU has wasted due to Machine Clears.  These slots are either wasted by uops fetched prior to the clear; or stalls the out-of-order portion of the machine needs to recover its state after the clear. For example; this can happen due to memory ordering Nukes (e.g. Memory Disambiguation) or Self-Modifying-Code (SMC) nukes.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "IDQ_UOPS_NOT_DELIVERED.CORE",
          "Alias": "a"
        },
        {
          "Name": "INT_MISC.UOP_DROPPING",
          "Alias": "b"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "c"
        },
        {
          "Name": "TOPDOWN.BACKEND_BOUND_SLOTS",
          "Alias": "d"
        },
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "e"
        },
        {
          "Name": "TOPDOWN.BR_MISPREDICT_SLOTS",
          "Alias": "f"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( max( 0 , ( max( 1 - ( ( ( a - b ) / ( c ) ) + ( d / ( c ) ) + ( e / ( c ) ) ) , 0 ) ) - ( f / ( c ) ) ) )",
      "BaseFormula": "max( 0 , tma_bad_speculation - tma_branch_mispredicts )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Machine_Clears(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_Bad_Speculation(%)"
          }
        ],
        "Formula": "a > 10 & b > 15",
        "BaseFormula": "metric_TMA_..Machine_Clears(%) > 10 & metric_TMA_Bad_Speculation(%) > 15",
        "ThresholdIssues": "$issueMC, $issueSyncxn"
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "BadSpec;BvMS;MachineClears;TmaL2",
      "LocateWith": "MACHINE_CLEARS.COUNT"
    },
    {
      "MetricName": "Backend_Bound",
      "LegacyName": "metric_TMA_Backend_Bound(%)",
      "Level": 1,
      "BriefDescription": "This category represents fraction of slots where no uops are being delivered due to a lack of required resources for accepting new uops in the Backend. Backend is the portion of the processor core where the out-of-order scheduler dispatches ready uops into their respective execution units; and once completed these uops get retired according to program order. For example; stalls due to data-cache misses or stalls due to the divider unit being overloaded are both categorized under Backend Bound. Backend Bound is further divided into two main categories: Memory Bound and Core Bound.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "TOPDOWN.BACKEND_BOUND_SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( a / b )",
      "BaseFormula": " 100 * ( [TOPDOWN.BACKEND_BOUND_SLOTS] / [TOPDOWN.SLOTS_P] )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_Backend_Bound(%)"
          }
        ],
        "Formula": "a > 20",
        "BaseFormula": "metric_TMA_Backend_Bound(%) > 20",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "BvOB;TmaL1",
      "LocateWith": " TOPDOWN.BACKEND_BOUND_SLOTS"
    },
    {
      "MetricName": "Memory_Bound",
      "LegacyName": "metric_TMA_..Memory_Bound(%)",
      "ParentCategory": "Backend_Bound",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots the Memory subsystem within the Backend was a bottleneck.  Memory Bound estimates fraction of slots where pipeline is likely stalled due to demand load or store instructions. This accounts mainly for (1) non-completed in-flight memory demand loads which coincides with execution units starvation; in addition to (2) cases where stores could impose backpressure on the pipeline when many of them get buffered at the same time (less common out of the two).",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "TOPDOWN.MEMORY_BOUND_SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( a / b )",
      "BaseFormula": " 100 * ( [TOPDOWN.MEMORY_BOUND_SLOTS] / [TOPDOWN.SLOTS_P] )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Memory_Bound(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_Backend_Bound(%)"
          }
        ],
        "Formula": "a > 20 & b > 20",
        "BaseFormula": "metric_TMA_..Memory_Bound(%) > 20 & metric_TMA_Backend_Bound(%) > 20",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Backend;TmaL2",
      "LocateWith": "#NA"
    },
    {
      "MetricName": "Core_Bound",
      "LegacyName": "metric_TMA_..Core_Bound(%)",
      "ParentCategory": "Backend_Bound",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots where Core non-memory issues were of a bottleneck.  Shortage in hardware compute resources; or dependencies in software's instructions are both categorized under Core Bound. Hence it may indicate the machine ran out of an out-of-order resource; certain execution units are overloaded or dependencies in program's data- or instruction-flow are limiting the performance (e.g. FP-chained long-latency arithmetic operations).",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "TOPDOWN.BACKEND_BOUND_SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        },
        {
          "Name": "TOPDOWN.MEMORY_BOUND_SLOTS",
          "Alias": "c"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( max( 0 , ( a / ( b ) ) - ( c / ( b ) ) ) )",
      "BaseFormula": "max( 0 , tma_backend_bound - tma_memory_bound )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Core_Bound(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_Backend_Bound(%)"
          }
        ],
        "Formula": "a > 10 & b > 20",
        "BaseFormula": "metric_TMA_..Core_Bound(%) > 10 & metric_TMA_Backend_Bound(%) > 20",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Backend;TmaL2;Compute",
      "LocateWith": ""
    },
    {
      "MetricName": "Retiring",
      "LegacyName": "metric_TMA_Retiring(%)",
      "Level": 1,
      "BriefDescription": "This category represents fraction of slots utilized by useful work i.e. issued uops that eventually get retired. Ideally; all pipeline slots would be attributed to the Retiring category.  Retiring of 100% would indicate the maximum Pipeline_Width throughput was achieved.  Maximizing Retiring typically increases the Instructions-per-cycle (see IPC metric). Note that a high Retiring value does not necessary mean there is no room for more performance.  For example; Heavy-operations or Microcode Assists are categorized under Retiring. They often indicate suboptimal performance and can often be optimized or avoided. ",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( a / b )",
      "BaseFormula": " 100 * ( [UOPS_RETIRED.SLOTS] / [TOPDOWN.SLOTS_P] )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_Retiring(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_..Heavy_Operations(%)"
          }
        ],
        "Formula": "a > 70 | b > 10",
        "BaseFormula": "metric_TMA_Retiring(%) > 70 | metric_TMA_..Heavy_Operations(%) > 10",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "BvUW;TmaL1",
      "LocateWith": " UOPS_RETIRED.SLOTS"
    },
    {
      "MetricName": "Light_Operations",
      "LegacyName": "metric_TMA_..Light_Operations(%)",
      "ParentCategory": "Retiring",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots where the CPU was retiring light-weight operations , instructions that require no more than one uop (micro-operation). This correlates with total number of instructions used by the program. A uops-per-instruction (see UopPI metric) ratio of 1 or less should be expected for decently optimized code running on Intel Core/Xeon products. While this often indicates efficient X86 instructions were executed; high value does not necessarily mean better performance cannot be achieved. ([ICL+] Note this may undercount due to approximation using indirect events; [ADL+] .)",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        },
        {
          "Name": "UOPS_RETIRED.HEAVY",
          "Alias": "c"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( max( 0 , ( a / ( b ) ) - ( c / ( b ) ) ) )",
      "BaseFormula": "max( 0 , tma_retiring - tma_heavy_operations )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Light_Operations(%)"
          }
        ],
        "Formula": "a > 60",
        "BaseFormula": "metric_TMA_..Light_Operations(%) > 60",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Retire;TmaL2",
      "LocateWith": "INST_RETIRED.PREC_DIST"
    },
    {
      "MetricName": "Memory_Operations",
      "LegacyName": "metric_TMA_....Memory_Operations(%)",
      "ParentCategory": "Light_Operations",
      "Level": 3,
      "BriefDescription": "This metric represents fraction of slots where the CPU was retiring memory operations , uops for memory load or store accesses.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        },
        {
          "Name": "UOPS_RETIRED.HEAVY",
          "Alias": "c"
        },
        {
          "Name": "MEM_UOP_RETIRED.ANY",
          "Alias": "d"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( ( max( 0 , ( a / ( b ) ) - ( c / ( b ) ) ) ) * d / ( ( a / ( b ) ) * ( b ) ) )",
      "BaseFormula": "tma_light_operations * mem_uop_retired.any / ( tma_retiring * tma_info_thread_slots )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_....Memory_Operations(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_..Light_Operations(%)"
          }
        ],
        "Formula": "a > 10 & b > 60",
        "BaseFormula": "metric_TMA_....Memory_Operations(%) > 10 & metric_TMA_..Light_Operations(%) > 60",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Pipeline",
      "LocateWith": ""
    },
    {
      "MetricName": "Fused_Instructions",
      "LegacyName": "metric_TMA_....Fused_Instructions(%)",
      "ParentCategory": "Light_Operations",
      "Level": 3,
      "BriefDescription": "This metric represents fraction of slots where the CPU was retiring fused instructions , where one uop can represent multiple contiguous instructions. CMP+JCC or DEC+JCC are common examples of legacy fusions. {([MTL] Note new MOV+OP and Load+OP fusions appear under Other_Light_Ops in MTL!)}",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        },
        {
          "Name": "UOPS_RETIRED.HEAVY",
          "Alias": "c"
        },
        {
          "Name": "INST_RETIRED.MACRO_FUSED",
          "Alias": "d"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( ( max( 0 , ( a / ( b ) ) - ( c / ( b ) ) ) ) * d / ( ( a / ( b ) ) * ( b ) ) )",
      "BaseFormula": "tma_light_operations * inst_retired.macro_fused / ( tma_retiring * tma_info_thread_slots )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_....Fused_Instructions(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_..Light_Operations(%)"
          }
        ],
        "Formula": "a > 10 & b > 60",
        "BaseFormula": "metric_TMA_....Fused_Instructions(%) > 10 & metric_TMA_..Light_Operations(%) > 60",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Branches;BvBO;Pipeline",
      "LocateWith": ""
    },
    {
      "MetricName": "Non_Fused_Branches",
      "LegacyName": "metric_TMA_....Non_Fused_Branches(%)",
      "ParentCategory": "Light_Operations",
      "Level": 3,
      "BriefDescription": "This metric represents fraction of slots where the CPU was retiring branch instructions that were not fused. Non-conditional branches like direct JMP or CALL would count here. Can be used to examine fusible conditional jumps that were not fused.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.SLOTS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        },
        {
          "Name": "UOPS_RETIRED.HEAVY",
          "Alias": "c"
        },
        {
          "Name": "BR_INST_RETIRED.ALL_BRANCHES",
          "Alias": "d"
        },
        {
          "Name": "INST_RETIRED.MACRO_FUSED",
          "Alias": "e"
        },
        {
          "Name": "BR_INST_RETIRED.ALL_BRANCHES",
          "Alias": "f"
        },
        {
          "Name": "INST_RETIRED.MACRO_FUSED",
          "Alias": "g"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( ( max( 0 , ( a / ( b ) ) - ( c / ( b ) ) ) ) * ( d - e ) / ( ( a / ( b ) ) * ( b ) ) )",
      "BaseFormula": "tma_light_operations * ( br_inst_retired.all_branches - inst_retired.macro_fused ) / ( tma_retiring * tma_info_thread_slots )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_....Non_Fused_Branches(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_..Light_Operations(%)"
          }
        ],
        "Formula": "a > 10 & b > 60",
        "BaseFormula": "metric_TMA_....Non_Fused_Branches(%) > 10 & metric_TMA_..Light_Operations(%) > 60",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Branches;BvBO;Pipeline",
      "LocateWith": ""
    },
    {
      "MetricName": "Heavy_Operations",
      "LegacyName": "metric_TMA_..Heavy_Operations(%)",
      "ParentCategory": "Retiring",
      "Level": 2,
      "BriefDescription": "This metric represents fraction of slots where the CPU was retiring heavy-weight operations , instructions that require two or more uops or micro-coded sequences. This highly-correlates with the uop length of these instructions/sequences.([ICL+] Note this may overcount due to approximation using indirect events; [ADL+])",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.HEAVY",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( a / b )",
      "BaseFormula": " 100 * ( [UOPS_RETIRED.HEAVY] / [TOPDOWN.SLOTS_P] )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_..Heavy_Operations(%)"
          }
        ],
        "Formula": "a > 10",
        "BaseFormula": "metric_TMA_..Heavy_Operations(%) > 10",
        "ThresholdIssues": ""
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "Retire;TmaL2",
      "LocateWith": " UOPS_RETIRED.HEAVY"
    },
    {
      "MetricName": "Few_Uops_Instructions",
      "LegacyName": "metric_TMA_....Few_Uops_Instructions(%)",
      "ParentCategory": "Heavy_Operations",
      "Level": 3,
      "BriefDescription": "This metric represents fraction of slots where the CPU was retiring instructions that that are decoder into two or more uops. This highly-correlates with the number of uops in such instructions.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.HEAVY",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        },
        {
          "Name": "UOPS_RETIRED.MS",
          "Alias": "c"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( max( 0 , ( a / ( b ) ) - ( c / ( b ) ) ) )",
      "BaseFormula": "max( 0 , tma_heavy_operations - tma_microcode_sequencer )",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_....Few_Uops_Instructions(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_..Heavy_Operations(%)"
          }
        ],
        "Formula": "a > 5 & b > 10",
        "BaseFormula": "metric_TMA_....Few_Uops_Instructions(%) > 5 & metric_TMA_..Heavy_Operations(%) > 10",
        "ThresholdIssues": "$issueD0"
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "",
      "LocateWith": ""
    },
    {
      "MetricName": "Microcode_Sequencer",
      "LegacyName": "metric_TMA_....Microcode_Sequencer(%)",
      "ParentCategory": "Heavy_Operations",
      "Level": 3,
      "BriefDescription": "This metric represents fraction of slots the CPU was retiring uops fetched by the Microcode Sequencer (MS) unit.  The MS is used for CISC instructions not supported by the default decoders (like repeat move strings; or CPUID); or by microcode assists used to address some operation modes (like in Floating Point assists). These cases can often be avoided.",
      "UnitOfMeasure": "percent",
      "Events": [
        {
          "Name": "UOPS_RETIRED.MS",
          "Alias": "a"
        },
        {
          "Name": "TOPDOWN.SLOTS_P",
          "Alias": "b"
        }
      ],
      "Constants": [],
      "Formula": "100 * ( a / ( b ) )",
      "BaseFormula": "uops_retired.ms / tma_info_thread_slots",
      "Category": "TMA",
      "CountDomain": "Slots",
      "Threshold": {
        "ThresholdMetrics": [
          {
            "Alias": "a",
            "Value": "metric_TMA_....Microcode_Sequencer(%)"
          },
          {
            "Alias": "b",
            "Value": "metric_TMA_..Heavy_Operations(%)"
          }
        ],
        "Formula": "a > 5 & b > 10",
        "BaseFormula": "metric_TMA_....Microcode_Sequencer(%) > 5 & metric_TMA_..Heavy_Operations(%) > 10",
        "ThresholdIssues": "$issueMC, $issueMS"
      },
      "ResolutionLevels": "THREAD, CORE, SOCKET, SYSTEM",
      "MetricGroup": "MicroSeq",
      "LocateWith": "UOPS_RETIRED.MS"
    }
  ]
}
