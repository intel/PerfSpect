[
    {
        "name": "CPU operating frequency (in GHz)",
        "expression": "(([cpu-cycles] / [ref-cycles] * [SYSTEM_TSC_FREQ]) / 1000000000)"
    },
    {
        "name": "CPU utilization %",
        "expression": "100 * [ref-cycles] / [TSC]"
    },
    {
        "name": "CPU utilization% in kernel mode",
        "expression": "100 * [ref-cycles:k] / [TSC]"
    },
    {
        "name": "CPI",
        "expression": "[cpu-cycles] / [instructions]"
    },
    {
        "name": "cycles per txn",
        "expression": "[cpu-cycles] / [TXN]"
    },
    {
        "name": "kernel_CPI",
        "expression": "[cpu-cycles:k] / [instructions:k]"
    },
    {
        "name": "kernel_cycles per txn",
        "expression": "[cpu-cycles:k] / [TXN]"
    },
    {
        "name": "IPC",
        "expression": "[instructions] / [cpu-cycles]"
    },
    {
        "name": "txn per cycle",
        "expression": "[TXN] / [cpu-cycles]"
    },
    {
        "name": "giga_instructions_per_sec",
        "expression": "[instructions] / 1000000000"
    },
    {
        "name": "branch misprediction ratio",
        "expression": "[BR_MISP_RETIRED.ALL_BRANCHES] / [BR_INST_RETIRED.ALL_BRANCHES]"
    },
    {
        "name": "locks retired per instr",
        "expression": "[MEM_UOPS_RETIRED.LOCK_LOADS] / [instructions]"
    },
    {
        "name": "locks retired per txn",
        "expression": "[MEM_UOPS_RETIRED.LOCK_LOADS] / [TXN]"
    },
    {
        "name": "L1D demand data read MPI",
        "expression": "[MEM_LOAD_UOPS_RETIRED.L1_MISS] / [instructions]"
    },
    {
        "name": "L1D demand data read misses per txn",
        "expression": "[MEM_LOAD_UOPS_RETIRED.L1_MISS] / [TXN]"
    },
    {
        "name": "L1D demand data read hits per instr",
        "expression": "[MEM_LOAD_UOPS_RETIRED.L1_HIT] / [instructions]"
    },
    {
        "name": "L1D demand data read hits per txn",
        "expression": "[MEM_LOAD_UOPS_RETIRED.L1_HIT] / [TXN]"
    },
    {
        "name": "L1-I code read misses (w/ prefetches) per instr",
        "expression": "[ICACHE.MISSES] / [instructions]"
    },
    {
        "name": "L1-I code read misses (w/ prefetches) per txn",
        "expression": "[ICACHE.MISSES] / [TXN]"
    },
    {
        "name": "L2 demand data read hits per instr",
        "expression": "[MEM_LOAD_UOPS_RETIRED.L2_HIT] / [instructions]"
    },
    {
        "name": "L2 demand data read hits per txn",
        "expression": "[MEM_LOAD_UOPS_RETIRED.L2_HIT] / [TXN]"
    },
    {
        "name": "L2 MPI (includes code+data+rfo w/ prefetches)",
        "expression": "[LONGEST_LAT_CACHE.REFERENCE] / [instructions]"
    },
    {
        "name": "L2 misses per txn (includes code+data+rfo w/ prefetches)",
        "expression": "[LONGEST_LAT_CACHE.REFERENCE] / [TXN]"
    },
    {
        "name": "L2 code MPI",
        "expression": "[OCR.L2_CODE_MISS] / [instructions]"
    },
    {
        "name": "L2 code misses per txn",
        "expression": "[OCR.L2_CODE_MISS] / [TXN]"
    },
    {
        "name": "L2 Any local request that HITM in another module (per instr)",
        "expression": "[OCR.READS_TO_CORE.L3_HIT.SNOOP_HITM] / [instructions]"
    },
    {
        "name": "L2 Any local request that HITM in another module per txn",
        "expression": "[OCR.READS_TO_CORE.L3_HIT.SNOOP_HITM] / [TXN]"
    },
    {
        "name": "L2 Any local request that HIT in another module and forwarded(per instr)",
        "expression": "[OCR.READS_TO_CORE.L3_HIT.SNOOP_HIT_WITH_FWD] / [instructions]"
    },
    {
        "name": "L2 Any local request that HIT in another module and forwarded per txn",
        "expression": "[OCR.READS_TO_CORE.L3_HIT.SNOOP_HIT_WITH_FWD] / [TXN]"
    },
    {
        "name": "L2 all L2 prefetches(per instr)",
        "expression": "[OCR.HWPF_L2.ANY_RESPONSE] / [instructions]"
    },
    {
        "name": "L2 all L2 prefetches per txn",
        "expression": "[OCR.HWPF_L2.ANY_RESPONSE] / [TXN]"
    },
    {
        "name": "data_read_L2_Miss_Latency_using_ORO_events(ns)",
        "expression": "( 1000000000 * ([OCR.READS_TO_CORE.OUTSTANDING] / [OCR.READS_TO_CORE.ANY_RESPONSE]) / ([cpu-cycles] / [TSC] * [SYSTEM_TSC_FREQ]) )"
    },
    {
        "name": "L3 MPI (includes code+data+rfo w/ prefetches)",
        "expression": "[LONGEST_LAT_CACHE.MISS] / [instructions]"
    },
    {
        "name": "L3 misses per txn (includes code+data+rfo w/ prefetches)",
        "expression": "[LONGEST_LAT_CACHE.MISS] / [TXN]"
    },
    {
        "name": "LLC MPI (includes code+data+rfo w/ prefetches)",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_CRD] + [UNC_CHA_TOR_INSERTS.IA_MISS_CRD_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFDATA] + [UNC_CHA_TOR_INSERTS.IA_MISS_RFO] + [UNC_CHA_TOR_INSERTS.IA_MISS_RFO_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFRFO]) / [instructions]"
    },
    {
        "name": "LLC misses per txn (includes code+data+rfo w/ prefetches)",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_CRD] + [UNC_CHA_TOR_INSERTS.IA_MISS_CRD_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFDATA] + [UNC_CHA_TOR_INSERTS.IA_MISS_RFO] + [UNC_CHA_TOR_INSERTS.IA_MISS_RFO_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFRFO]) / [TXN]"
    },
    {
        "name": "LLC total HITM (per instr)",
        "expression": "[OCR.READS_TO_CORE.REMOTE_CACHE.SNOOP_HITM] / [instructions]"
    },
    {
        "name": "LLC total HITM per txn (excludes LLC prefetches)",
        "expression": "[OCR.READS_TO_CORE.REMOTE_CACHE.SNOOP_HITM] / [TXN]"
    },
    {
        "name": "LLC total HIT clean line forwards (per instr)",
        "expression": "[OCR.READS_TO_CORE.REMOTE_CACHE.SNOOP_HIT_WITH_FWD] / [instructions]"
    },
    {
        "name": "LLC total HIT clean line forwards per txn (excludes LLC prefetches)",
        "expression": "[OCR.READS_TO_CORE.REMOTE_CACHE.SNOOP_HIT_WITH_FWD] / [TXN]"
    },
    {
        "name": "LLC data read MPI (demand+prefetch)",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFDATA]) / [instructions]"
    },
    {
        "name": "LLC data read (demand+prefetch) misses per txn",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT] + [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT_PREF] + [UNC_CHA_TOR_INSERTS.IA_MISS_LLCPREFDATA]) / [TXN]"
    },
    {
        "name": "LLC code read MPI (demand+prefetch)",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_CRD] + [UNC_CHA_TOR_INSERTS.IA_MISS_CRD_PREF]) / [instructions]"
    },
    {
        "name": "LLC code read (demand+prefetch) misses per txn",
        "expression": "([UNC_CHA_TOR_INSERTS.IA_MISS_CRD] + [UNC_CHA_TOR_INSERTS.IA_MISS_CRD_PREF]) / [TXN]"
    },
    {
        "name": "Average LLC demand data read miss latency (in ns)",
        "expression": "( 1000000000 * ([UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_OPT] / [UNC_CHA_TOR_INSERTS.IA_MISS_DRD_OPT]) / ([UNC_CHA_CLOCKTICKS] / ([CHAS_PER_SOCKET] * [SOCKET_COUNT]) ) ) * 1"
    },
    {
        "name": "Average LLC demand RFO miss latency (in ns)",
        "expression": "( 1000000000 * ([UNC_CHA_TOR_OCCUPANCY.IA_MISS_RFO] / [UNC_CHA_TOR_INSERTS.IA_MISS_RFO]) / ([UNC_CHA_CLOCKTICKS] / ([CHAS_PER_SOCKET] * [SOCKET_COUNT]) ) ) * 1"
    },
    {
        "name": "core initiated local dram read bandwidth (MB/sec)",
        "expression": "([LONGEST_LAT_CACHE.MISS]) * 64 / 1000000"
    },
    {
        "name": "memory bandwidth read (MB/sec)",
        "expression": "(([UNC_M_CAS_COUNT_SCH0.RD] + [UNC_M_CAS_COUNT_SCH1.RD]) * 64 / 1000000) / 1"
    },
    {
        "name": "memory bandwidth write (MB/sec)",
        "expression": "(([UNC_M_CAS_COUNT_SCH0.WR] + [UNC_M_CAS_COUNT_SCH1.WR]) * 64 / 1000000) / 1"
    },
    {
        "name": "memory bandwidth total (MB/sec)",
        "expression": "(([UNC_M_CAS_COUNT_SCH0.RD] + [UNC_M_CAS_COUNT_SCH1.RD] + [UNC_M_CAS_COUNT_SCH0.WR] + [UNC_M_CAS_COUNT_SCH1.WR]) * 64 / 1000000) / 1"
    },
    {
        "name": "IO_bandwidth_disk_or_network_writes (MB/sec)",
        "expression": "([UNC_CHA_TOR_INSERTS.IO_PCIRDCUR] * 64 / 1000000) / 1"
    },
    {
        "name": "IO_bandwidth_disk_or_network_reads (MB/sec)",
        "expression": "(([UNC_CHA_TOR_INSERTS.IO_ITOM] + [UNC_CHA_TOR_INSERTS.IO_ITOMCACHENEAR]) * 64 / 1000000) / 1"
    },
    {
        "name": "package power (watts)",
        "expression": "[power/energy-pkg/]"
    },
    {
        "name": "DRAM power (watts)",
        "expression": "[power/energy-ram/]"
    },
    {
        "name": "core c6 residency %",
        "expression": "100 * [cstate_core/c6-residency/] / [TSC]"
    },
    {
        "name": "package c6 residency %",
        "expression": "100 * [cstate_pkg/c6-residency/] * [CORES_PER_SOCKET] / [TSC]"
    },
    {
        "name": "uncore frequency GHz",
        "expression": "([UNC_CHA_CLOCKTICKS] / ([CHAS_PER_SOCKET] * [SOCKET_COUNT]) / 1000000000) / 1"
    },
    {
        "name": "ITLB (2nd level) MPI",
        "expression": "[ITLB_MISSES.WALK_COMPLETED] / [instructions]"
    },
    {
        "name": "ITLB (2nd level) misses per txn",
        "expression": "[ITLB_MISSES.WALK_COMPLETED] / [TXN]"
    },
    {
        "name": "DTLB (2nd level) load MPI",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED] / [instructions]"
    },
    {
        "name": "DTLB (2nd level) load misses per txn",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED] / [TXN]"
    },
    {
        "name": "DTLB  (2nd level) 4KB page load MPI",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_4K] / [instructions]"
    },
    {
        "name": "DTLB  (2nd level) 4KB page load misses per txn",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_4K] / [TXN]"
    },
    {
        "name": "DTLB (2nd level) 2MB large page load MPI",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M] / [instructions]"
    },
    {
        "name": "DTLB (2nd level) 2MB large page load misses per txn",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M] / [TXN]"
    },
    {
        "name": "DTLB (2nd level) 1GB large page load MPI",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_1G] / [instructions]"
    },
    {
        "name": "DTLB (2nd level) 1GB large page load misses per txn",
        "expression": "[DTLB_LOAD_MISSES.WALK_COMPLETED_1G] / [TXN]"
    },
    {
        "name": "DTLB (2nd level) store MPI",
        "expression": "[DTLB_STORE_MISSES.WALK_COMPLETED] / [instructions]"
    },
    {
        "name": "DTLB (2nd level) store misses per txn",
        "expression": "[DTLB_STORE_MISSES.WALK_COMPLETED] / [TXN]"
    },
    {
        "name": "TMA_Frontend_Bound(%)",
        "expression": "100 * ( [TOPDOWN_FE_BOUND.ALL] / ( 6 * [cpu-cycles] ) )"
    },
    {
        "name": "TMA_..Fetch_Latency(%)",
        "expression": "100*([TOPDOWN_FE_BOUND.FRONTEND_LATENCY] / (6.0 * [cpu-cycles]))"
    },
    {
        "name": "TMA_....ICache_Misses(%)",
        "expression": "100 * ( [TOPDOWN_FE_BOUND.ICACHE] / ( 6 * [cpu-cycles] ) )"
    },
    {
        "name": "TMA_....ITLB_Misses(%)",
        "expression": "100 * ( [TOPDOWN_FE_BOUND.ITLB_MISS] / ( 6 * [cpu-cycles] ) )"
    },
    {
        "name": "TMA_....Branch_Resteer(%)",
        "expression": "100*([TOPDOWN_FE_BOUND.BRANCH_RESTEER] / (6.0 * [cpu-cycles]))"
    },
    {
        "name": "TMA_..Fetch_Bandwidth(%)",
        "expression": "100*([TOPDOWN_FE_BOUND.FRONTEND_BANDWIDTH] / (6.0 * [cpu-cycles]))"
    },
    {
        "name": "TMA_Bad_Speculation(%)",
        "expression": "100 * ( [TOPDOWN_BAD_SPECULATION.ALL] / ( 6 * [cpu-cycles] ) )"
    },
    {
        "name": "TMA_..Branch_Mispredicts(%)",
        "expression": "100*([TOPDOWN_BAD_SPECULATION.MISPREDICT] / (6.0 * [cpu-cycles]))"
    },
    {
        "name": "TMA_..Machine_Clears(%)",
        "expression": "100*([TOPDOWN_BAD_SPECULATION.MACHINE_CLEARS] / (6.0 * [cpu-cycles]))"
    },
    {
        "name": "TMA_Backend_Bound(%)",
        "expression": "100 * ( [TOPDOWN_BE_BOUND.ALL] / ( 6 * [cpu-cycles] ) )"
    },
    {
        "name": "TMA_..Memory_Bound(%)",
        "expression": "100*min(1*([TOPDOWN_BE_BOUND.ALL] / (6.0 * [cpu-cycles])), 1*([LD_HEAD.ANY_AT_RET] / [cpu-cycles] + ([TOPDOWN_BE_BOUND.MEM_SCHEDULER] / (6.0 * [cpu-cycles])) * [MEM_SCHEDULER_BLOCK.ST_BUF] / [MEM_SCHEDULER_BLOCK.ALL]))"
    },
    {
        "name": "TMA_....L1_Bound(%)",
        "expression": "100*([LD_HEAD.L1_BOUND_AT_RET] / [cpu-cycles])"
    },
    {
        "name": "TMA_....L2_Bound(%)",
        "expression": "100*([MEM_BOUND_STALLS_LOAD.L2_HIT] / [cpu-cycles] - (max(1*(([MEM_BOUND_STALLS_LOAD.ALL] - [LD_HEAD.L1_MISS_AT_RET]) / [cpu-cycles]), 0) * [MEM_BOUND_STALLS_LOAD.L2_HIT] / [MEM_BOUND_STALLS_LOAD.ALL]))"
    },
    {
        "name": "TMA_....L3_Bound(%)",
        "expression": "100*([MEM_BOUND_STALLS_LOAD.LLC_HIT] / [cpu-cycles] - (max(1*(([MEM_BOUND_STALLS_LOAD.ALL] - [LD_HEAD.L1_MISS_AT_RET]) / [cpu-cycles]), 0) * [MEM_BOUND_STALLS_LOAD.LLC_HIT] / [MEM_BOUND_STALLS_LOAD.ALL]))"
    },
    {
        "name": "TMA_....Store_Bound(%)",
        "expression": "100*(([TOPDOWN_BE_BOUND.MEM_SCHEDULER] / (6.0 * [cpu-cycles])) * [MEM_SCHEDULER_BLOCK.ST_BUF] / [MEM_SCHEDULER_BLOCK.ALL])"
    },
    {
        "name": "TMA_..Core_Bound(%)",
        "expression": "100*max(0, 1*([TOPDOWN_BE_BOUND.ALL] / (6.0 * [cpu-cycles]) - min(1*([TOPDOWN_BE_BOUND.ALL] / (6.0 * [cpu-cycles])), 1*([LD_HEAD.ANY_AT_RET] / [cpu-cycles] + ([TOPDOWN_BE_BOUND.MEM_SCHEDULER] / (6.0 * [cpu-cycles])) * [MEM_SCHEDULER_BLOCK.ST_BUF] / [MEM_SCHEDULER_BLOCK.ALL]))))"
    },
    {
        "name": "TMA_....Serialization(%)",
        "expression": "100*([TOPDOWN_BE_BOUND.SERIALIZATION] / (6.0 * [cpu-cycles]))"
    },
    {
        "name": "TMA_Retiring(%)",
        "expression": "100 * ( [TOPDOWN_RETIRING.ALL] / ( 6 * [cpu-cycles] ) )"
    }
]